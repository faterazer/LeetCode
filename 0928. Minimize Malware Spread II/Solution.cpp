#include <ranges>
#include <unordered_map>
#include <unordered_set>
#include <vector>
using namespace std;

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial)
    {
        int n = graph.size(), size, node;
        unordered_set<int> st(initial.begin(), initial.end());
        vector<int> visited(n, 0);
        unordered_map<int, int> cnt;

        function<void(int)> dfs = [&](int x) -> void {
            if (st.contains(x)) {
                if (node != -2)
                    node = (node == -1 || node == x) ? x : -2;
                return;
            }

            visited[x] = 1;
            ++size;

            for (int y = 0; y < n; y++)
                if (graph[x][y] && !visited[y])
                    dfs(y);
        };

        for (int i = 0; i < n; i++) {
            if (visited[i] || st.contains(i))
                continue;

            size = 0;
            node = -1;
            dfs(i);
            if (node >= 0)
                cnt[node] += size;
        }

        int res = -1, max_cnt = 0;
        for (auto& [k, v] : cnt)
            if (v > max_cnt || (v == max_cnt && k < res)) {
                max_cnt = v;
                res = k;
            }
        return res >= 0 ? res : ranges::min(initial);
    }
};
