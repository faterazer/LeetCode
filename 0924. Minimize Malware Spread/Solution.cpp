#include <ranges>
#include <unordered_set>
#include <vector>
using namespace std;

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial)
    {
        int res = -1, n = graph.size(), max_size = 0, size, node;
        unordered_set<int> st(initial.begin(), initial.end());
        vector<int> visited(n, 0);

        function<void(int)> dfs = [&](int x) {
            visited[x] = 1;
            ++size;
            if (st.contains(x) && node != -2)
                node = node == -1 ? x : -2;

            for (int y = 0; y < n; ++y)
                if (graph[x][y] && !visited[y])
                    dfs(y);
        };

        for (int i : initial) {
            if (visited[i])
                continue;

            size = 0;
            node = -1;
            dfs(i);
            if (node >= 0 && (size > max_size || (size == max_size && node < res))) {
                res = node;
                max_size = size;
            }
        }
        return res >= 0 ? res : ranges::min(initial);
    }
};
